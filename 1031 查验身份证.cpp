///*
//1031 查验身份证 (15 分)
//一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：
//
//首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：
//
//Z：0 1 2 3 4 5 6 7 8 9 10
//M：1 0 X 9 8 7 6 5 4 3 2
//现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。
//
//输入格式：
//输入第一行给出正整数N（≤100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。
//
//输出格式：
//按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出All passed。
//
//输入样例1：
//4
//320124198808240056
//12010X198901011234
//110108196711301866
//37070419881216001X
//输出样例1：
//12010X198901011234
//110108196711301866
//37070419881216001X
//输入样例2：
//2
//320124198808240056
//110108196711301862
//输出样例2：
//All passed
//鸣谢阜阳师范学院范建中老师补充数据
//*/
///*
//思路：先将身份证号以字符串的形式保存，并且每一个字符串都有一个符号checked表明是否符合规则
//先判断每个身份证的前17位数字是否都为数字，然后再判断最后一位数字是否符合规则，输出即可，最后别忘了
//all pased也要加endl换行符
//*/
//#include<iostream>
//#include<string>
//#include<map>
//using namespace std;
//typedef struct Str {
//	string str;
//	bool checked = false;
//}strin;
//int main(void)
//{
//	int n;
//	cin >> n;
//	strin s[101];
//	map<int, char>P;
//	P[0] = '1';
//	P[1] = '0';
//	P[2] = 'X';
//	P[3] = '9';
//	P[4] = '8';
//	P[5] = '7';
//	P[6] = '6';
//	P[7] = '5';
//	P[8] = '4';
//	P[9] = '3';
//	P[10] = '2';
//	int add[17] = { 7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2 };
//	for (int i = 0; i < n; i++)
//	{
//		cin >> s[i].str;
//	}
//	bool flag = false;
//	for (int i = 0; i < n; i++)
//	{
//		for (int j = 0; j < 17; j++)
//		{
//			if (s[i].str[j] > '9' || s[i].str[j] < '0')
//			{
//				s[i].checked = true;
//				flag = true;
//				break;
//			}
//		}
//	}
//	for (int i = 0; i < n; i++)
//	{
//		int sum = 0;
//		for (int j = 0; j < 17; j++)//注意这里一定是17即前17位因为第18位有可能是X
//		{
//			sum += (s[i].str[j] - '0') * add[j];
//		}
//		sum %= 11;
//		if (P[sum] != s[i].str[17])
//		{
//			s[i].checked = true;
//			flag = true;
//		}
//	}
//	for (int i = 0; i < n; i++)
//	{
//		if (s[i].checked)
//		{
//			cout << s[i].str << endl;
//		}
//	}
//	if (!flag)
//	{
//		cout << "All passed" << endl;
//	}
//	system("pause");
//	return 0;
//}