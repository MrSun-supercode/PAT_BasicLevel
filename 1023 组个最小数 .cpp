///*
//给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。
//
//现给定数字，请编写程序输出能够组成的最小的数。
//
//输入格式：
//输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。
//
//输出格式：
//在一行中输出能够组成的最小的数。
//
//输入样例：
//2 2 0 0 0 3 0 0 1 0
//输出样例：
//10015558
//*/
///*
//思路：如果要组成最小的数，那么肯定是小数在高位，大数在低位
//如果这些数中需要填0的话，那么0不能放首位，所以要从1-9遍历看第一个数的个数不为0，输出它并跳出循环
//如果这些数中没有0的话，那么直接按小数在高位，大数在低位的原则进行输出即可
//*/
//#include<iostream>
//using namespace std;
//int main(void)
//{
//	int num_count[10];
//	for (int i = 0; i < 10; i++)
//	{
//		cin >> num_count[i];
//	}
//	if (num_count[0]==0)
//	{
//		for (int i = 1; i < 10; i++)
//		{
//			while (num_count[i]!=0)
//			{
//				cout << i;
//				num_count[i]--;
//			}
//		}
//	}
//	else {
//		for (int i = 1; i < 10; i++)
//		{
//			if (num_count[i]!=0)
//			{
//				cout << i;
//				num_count[i]--;
//				break;
//			}
//		}
//		for (int i = 0; i < 10; i++)
//		{
//			while (num_count[i]!=0)
//			{
//				cout << i;
//				num_count[i]--;
//			}
//		}
//	}
//	system("pause");
//	return 0;
//}
