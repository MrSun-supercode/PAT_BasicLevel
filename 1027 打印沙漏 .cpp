///*
//1027 打印沙漏 （20 分)
//本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印
//
//*****
// ***
//  *
// ***
//*****
//所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。
//
//给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。
//
//输入格式:
//输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。
//
//输出格式:
//首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。
//
//输入样例:
//19 *
//输出样例:
//*****
// ***
//  *
// ***
//*****
//2
//*/
///*
//思路：先求出最大输出的字符个数还有最大行上字符的个数
//然后先从大到小步长为2输出一遍，最后从小到大步长为2再输出一遍
//*/
//#include<iostream>
//using namespace std;
//int main(void)
//{
//	int n;
//	char ch;
//	cin >> n >> ch;
//	int sum = 1;//打印符号最小数为1，从1开始往上走
//	int i = 3;//1上面一行就是三个字符
//	while (sum <= n)
//	{
//		sum += i * 2;//步长为2
//		i += 2;
//	}
//	i -= 2;//由于i为多加了一个2，所以减去
//	sum -= i * 2;//找到最后一次增加没超过n的sum值
//	i -= 2;//这里再-2是找到最大行的字符个数
//	int temp = i;//temp=i防止i的值改变后续反向输出不方便
//	int m, j = 0;
//	while (temp >= 1)//一直循环输出知道一行只有一个字符
//	{
//		for (m = 0; m < j; m++)
//		{
//			cout << ' ';
//		}
//		for (int x = 0; x < temp; x++)
//		{
//			if (x == temp - 1)
//			{
//				cout << ch << endl;
//			}
//			else  cout << ch;
//		}
//		j++;
//		temp -= 2;
//	}
//	temp = 3;//temp设置为最短的行上面的字符个数
//	m -= 1;//m一定要设置为全局变量，保存输出一个字符时前面有多少个空格
//	while (temp <= i)//同理只不过是跟上面的反过来
//	{
//		for (int y = 0; y < m; y++)
//		{
//			cout << ' ';
//		}
//		for (int q = 0; q < temp; q++)
//		{
//			if (q == temp - 1)
//			{
//				cout << ch << endl;
//			}
//			else  cout << ch;
//		}
//		m -= 1;
//		temp += 2;
//	}
//	cout << n - sum;//输出剩余的字符数
//	system("pause");
//	return 0;
//}